from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report,mean_absolute_error,r2_score
from sklearn.metrics import accuracy_score


scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)



X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)


classifiers = [
    RandomForestClassifier(),
    GradientBoostingClassifier(),
    SVC()
]

best_model = None
best_score = 0

for clf in classifiers:

    params = {}
    grid_search = GridSearchCV(clf, params, cv=5)
    grid_search.fit(X_train, y_train)


    y_pred = grid_search.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)

    print(f"Classifier: {clf.__class__.__name__}, Accuracy: {accuracy}")

    if accuracy > best_score:
        best_score = accuracy
        best_model = grid_search.best_estimator_

print("Best Model:")
print(best_model)
y_pred = best_model.predict(X_test)
print("Classification Report:")
print(classification_report(y_test, y_pred))

import joblib


joblib.dump(best_model, 'crop_prediction.pkl')


import numpy as np
num_samples = 100
num_features = 5

N_values = np.random.uniform(low=0.0, high=200.0, size=num_samples)
P_values = np.random.uniform(low=0.0, high=100.0, size=num_samples)
K_values = np.random.uniform(low=0.0, high=200.0, size=num_samples)
temperature_values = np.random.uniform(low=10.0, high=40.0, size=num_samples)
pH_values = np.random.uniform(low=4.0, high=8.0, size=num_samples)

X_unseen = np.column_stack((N_values, P_values, K_values, temperature_values, pH_values))

import joblib

loaded_model = joblib.load('/content/crop_prediction.pkl')
X_unseen_scaled = scaler.transform(X_unseen)
predictions = loaded_model.predict(X_unseen_scaled)
